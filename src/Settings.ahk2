/******************************************************************************
 * @description Settings screen for arcadeVFE
 * @file Settings.ahk2
 * @author Â© 2025 David G. Dahlstrom
 ******************************************************************************/

/******************************************************************************
* LICENSE
* The code in this file is distributed freely on GitHub for hobbyist 
* users, and may be used and modified freely for personal, non-commercial 
* use. It may not be sold or distributed with any other product or software 
* without permission.
*******************************************************************************/

/**
 * Create Settings Screen
 */
class Settings
{
	static sActionListName := "Arcade Controller"
	static sROMFolderOGText := ""
	static mMetrics := Map()
	static iCommandLinesUsed := 1

	;Action list constants
	static DEVICE := 1
	static ACTION := 2
	static SEQUENCE := 3
	static ANNUNC := 4
	static PROFILE := 5
	static COMMAND := 6
	static PROFILE_2 := 7
	static COMMAND_2 := 8
	static TEMPLATE := 9
	static TEMPLATE_2 := 10
	static TEMPLATE_3 := 11
	static PROFILE_3 := 12
	static COMMAND_3 := 13

	static BuildScreen()
	{
		global

		local nButtonWidth := 70
		local nButtonWidthWide := 90
		local nIconButtonWidth := 40

		sSettingsTitle := "arcadeVFE (for ATC) - Settings"

		Settings.mMetrics.Width := 900
		Settings.mMetrics.Height := 750
		Settings.mMetrics.X := Round((A_ScreenWidth / 2) - (Settings.mMetrics.Width / 2))
		Settings.mMetrics.Y := Round((A_ScreenHeight / 2) - (Settings.mMetrics.Height / 2))
		guiSettings := Gui(,sSettingsTitle)

		guiSettings.OnEvent("Close", (*) => Settings.Settings_Close())

		gcDevicesLabel := guiSettings.AddText("x" 30 " y" 10 " w" 250, "Device List")

		gcDevices := guiSettings.AddDropDownList("x" 30 " y" 25 " w" 320 " +BackgroundWhite",)
		gcDevices.OnEvent("Change", (*) => Settings.Devices_Change())
		gcDevices.TT := "Select the device or method that will trigger the action."
		
		gcROMMonitorFolderLabel := guiSettings.AddText("x" 370 " y" 10 " w" 350, "ROM folder to monitor")
		gcROMMonitorFolderEdit := guiSettings.AddEdit("x" 370 " y" 25 " w" 457 " +BackgroundWhite",)
		gcROMMonitorFolderEdit.OnEvent("Change", (*) => Settings.ROMMonitorFolderEdit_Change())
		gcROMMonitorFolderEdit.TT := "Enter the full path to the folder containing your MAME roms.`nThe files in this folder must have an extension of *.zip"

        gcButtonOptionsGroupBox := guiSettings.AddGroupBox("x" 380 " y" 10 " w" 480 " h" 83, "Button Operation Options")

		gcCommandLine_Radio := guiSettings.AddRadio("vButtonOptionsGroup Checked " "x" 400 " y" 35, "Use Command Lines")
		gcCommandLine_Radio.OnEvent("Click", (*) => Settings.CommandLine_Radio_Click())
		gcCommandLine_Radio.TT := "Check this to create a command line button action."

		gcSendKey_Radio := guiSettings.AddRadio("x" 400 " y" 60, "Map Keypress")
		gcSendKey_Radio.OnEvent("Click", (*) => Settings.SendKey_Radio_Click())
		gcSendKey_Radio.TT := "Check this to map a keypress action."

		gcGameInfo_Radio := guiSettings.AddRadio("x" 610 " y" 35, "Game Info Navigation")
		gcGameInfo_Radio.OnEvent("Click", (*) => Settings.GameInfo_Radio_Click())
		gcGameInfo_Radio.TT := "Check this to map a game info navigation action."

		gcSendKey_ComboBox := guiSettings.AddComboBox("x" 490 " y" 57 " w" 100 " +BackgroundWhite",)
		gcSendKey_ComboBox.OnEvent("Change", (*) => Settings.SendKey_ComboBox_Change())

		gcGameInfo_ComboBox := guiSettings.AddComboBox("x" 735 " y" 32 " w" 100 " +BackgroundWhite",)
		gcGameInfo_ComboBox.OnEvent("Change", (*) => Settings.GameInfo_ComboBox_Change())

		gcSendKey_ComboBox.Add(Settings.FillKeysArray())
		gcGameInfo_ComboBox.Add(["Right","Left","Home","Exit"])

		gcButtonOptionsGroupBox.Visible := gcSendKey_Radio.Visible := gcCommandLine_Radio.Visible := gcSendKey_ComboBox.Visible := gcGameInfo_Radio.Visible := gcGameInfo_ComboBox.Visible := false

		try gcROMMonitorFolderEdit.Text := IniRead(sIniFile, "General", "ROMFolder")
		Settings.sROMFolderOGText := gcROMMonitorFolderEdit.Text

		gcROMMonitorFolderBrowseButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth - 30 " y" 24 " w" nIconButtonWidth)
		gcROMMonitorFolderBrowseButton.OnEvent("Click", (*) => Settings.ROMMonitorFolderBrowseButton_Click())
		gcROMMonitorFolderBrowseButton.TT := "Browse for a folder containing your MAME roms.`nThese must have an extension of *.zip"
		GuiButtonIcon(gcROMMonitorFolderBrowseButton, 'imageres.dll', 206, 's16')

		gcAnnunciationLabel := guiSettings.AddText("x" 30 " y" 55 " w" 250, "Voice annunciation phrase (optional)")
		gcAnnunciationEdit := guiSettings.AddEdit("x" 30 " y" 70 " w" 277 " +BackgroundWhite",)
		gcAnnunciationEdit.OnEvent("Change", (*) => Settings.AnnunciationEdit_Change())
		gcAnnunciationEdit.TT := "Word or phrase that will be`nspoken upon execution of the action."

		gcAnnunciationTestButton := guiSettings.AddButton("x" 310 " y" 69 " w" nIconButtonWidth)
		gcAnnunciationTestButton.OnEvent("Click", (*) => Settings.AnnunciationTestButton_Click())
		gcAnnunciationTestButton.Enabled := false
		gcAnnunciationTestButton.TT := "Test the voice phrase."
		GuiButtonIcon(gcAnnunciationTestButton, 'icons.dll', 20, 's16') ;megaphone icon

		gcROMDropDownLabel := guiSettings.AddText("x" 370 " y" 55 " w" 300, "Choose ROM")
		gcROMDropDown := guiSettings.AddDropDownList("x" 370 " y" 70 " w" 500 " +BackgroundWhite",)
		gcROMDropDown.OnEvent("Change", (*) => Settings.ROMDropDown_Change())
		gcROMDropDown.TT := "Select a MAME game to monitor for activity. If this list has no items,`nmake sure the `"ROM folder to monitor`" field above contains a`nvalid path to a folder containing MAME roms."

		cBGColor := PixelGetColor(370, 90)
		WinSetTransColor(cBGColor)

		gcROMDropDownGameRom := guiSettings.AddText("BackgroundTrans x" 373 " y" 90 " w" 480, "")
		gcROMDropDownGameInfo := guiSettings.AddText("BackgroundTrans x" 370 " y" 92 " w" 480 " 0x1", "")
		gcROMDropDownGameVersion := guiSettings.AddText("BackgroundTrans x" 370 " y" 92 " w" 480 " 0x2", "")

		gcProfileLabel := guiSettings.AddText("x" 80 " y" 123 " w" 80, "Profile name")
		gcProfileEdit := guiSettings.AddEdit("x" 150 " y" 120 " w" 592 " +BackgroundWhite",)
		gcProfileEdit.OnEvent("Change", (*) => Settings.ProfileEdit_Change())
		gcProfileEdit.TT := "Enter a profile name to insert into the [profile_name] or`n[profile_full_name] field tag(s) of the Command Line Template."
		
		gcProfileBrowseButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 119 " w" nIconButtonWidth)
		gcProfileBrowseButton.OnEvent("Click", (*) => Settings.ProfileBrowseButton_Click())
		gcProfileBrowseButton.TT := "Browse for a profile to insert into the`n[profile_name] or [profile_full_name] field tag(s) of the Command Line Template."
		GuiButtonIcon(gcProfileBrowseButton, 'imageres.dll', 206, 's16')

		gcTemplateLabel := guiSettings.AddText("x" 60 " y" 146 " w" 80 " 0x2", "Command Line`ntemplate")
		gcTemplateEdit := guiSettings.AddComboBox("x" 150 " y" 150 " w" 592 " +BackgroundWhite",)
		gcTemplateEdit.OnEvent("Change", (*) => Settings.TemplateEdit_Change())
		gcTemplateEdit.TT := "A template for the command line which will execute for this action. This template`nmay include field tags such as [profile_name] and [profile_full_name] which will be`nreplaced by the contents of the Profile name field.`n`n[profile_name]`          will be replaced by the profile name`n[profile_full_name]   will be replaced by the profile's full path and filename."

		gcAddTemplateButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 149 " w" nIconButtonWidth)
		gcAddTemplateButton.OnEvent("Click", (*) => Settings.AddTemplateButton_Click())
		gcAddTemplateButton.TT := "Add this template definition to the list. It will also`nbe added to the Command Line 2 template list."
		gcAddTemplateButton.Enabled := false
		GuiButtonIcon(gcAddTemplateButton, 'icons.dll', 127, 's16') ;add (+) icon

		gcRemoveTemplateButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*2 - 30 - 2 " y" 149 " w" nIconButtonWidth)
		gcRemoveTemplateButton.OnEvent("Click", (*) => Settings.RemoveTemplateButton_Click())
		gcRemoveTemplateButton.TT := "Delete this template definition from the list. It will also`nbe deleted from the Command Line 2 template list."
		GuiButtonIcon(gcRemoveTemplateButton, 'icons.dll', 130, 's16') ;remove (-) icon

		gcTestTemplateButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth - 30 " y" 149 " w" nIconButtonWidth)
		gcTestTemplateButton.OnEvent("Click", (*) => Settings.TestTemplateButton_Click())
		GuiButtonIcon(gcTestTemplateButton, 'icons.dll', 32, 's16') ;gear icon

		gcProfile_2_Checkbox := guiSettings.AddCheckbox("x" 40 " y" 193)
		gcProfile_2_Checkbox.OnEvent("Click", (*) => Settings.Profile_2_Checkbox_Click())
		gcProfile_2_Checkbox.TT := "Check this to enable configuration of`na second command for the action."

		gcProfileLabel_2 := guiSettings.AddText("x" 73 " y" 193 " w" 80, "Profile name 2")
		gcProfileEdit_2 := guiSettings.AddEdit("x" 150 " y" 190 " w" 592 " +BackgroundWhite",)
		gcProfileEdit_2.OnEvent("Change", (*) => Settings.ProfileEdit_2_Change())
		gcProfileEdit_2.TT := "Enter a profile name to insert into the [profile_name] or `n[profile_full_name] field tag(s) of the Command Line 2 template."

		gcProfileBrowseButton_2 := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 189 " w" nIconButtonWidth)
		gcProfileBrowseButton_2.OnEvent("Click", (*) => Settings.ProfileBrowseButton_2_Click())
		gcProfileBrowseButton_2.TT := "Browse for a profile to insert into the`n[profile_name] or [profile_full_name] field tag(s) of`nthe Command Line 2 template."
		GuiButtonIcon(gcProfileBrowseButton_2, 'imageres.dll', 206, 's16')

		gcTemplateLabel_2 := guiSettings.AddText("x" 60 " y" 216 " w" 80 " 0x2", "Command Line`ntemplate 2")
		gcTemplateEdit_2 := guiSettings.AddComboBox("x" 150 " y" 220 " w" 592 " +BackgroundWhite",)
		gcTemplateEdit_2.OnEvent("Change", (*) => Settings.TemplateEdit_2_Change())
		gcTemplateEdit_2.TT := "A template for a second command line that will execute one second after the first. This`ntemplate may include field tags such as [profile_name] and [profile_full_name] which`nwill be replaced by the contents of the Profile name 2 field.`n`n[profile_name]`          will be replaced by profile 2's name`n[profile_full_name]   will be replaced by profile 2's full path and filename."

		gcTestTemplateButton_2 := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 219 " w" nIconButtonWidth)
		gcTestTemplateButton_2.OnEvent("Click", (*) => Settings.TestTemplateButton_2_Click())
		gcTestTemplateButton_2.Enabled := false
		GuiButtonIcon(gcTestTemplateButton_2, 'icons.dll', 32, 's16') ;gear icon

		gcProfileLabel_2.Enabled := gcProfileEdit_2.Enabled := gcProfileBrowseButton_2.Enabled := gcTemplateLabel_2.Enabled := gcTemplateEdit_2.Enabled := false

		gcProfile_3_Checkbox := guiSettings.AddCheckbox("x" 40 " y" 263)
		gcProfile_3_Checkbox.OnEvent("Click", (*) => Settings.Profile_3_Checkbox_Click())
		gcProfile_3_Checkbox.TT := "Check this to enable configuration of`na third command for the action."
		gcProfile_3_Checkbox.Enabled := false

		gcProfileLabel_3 := guiSettings.AddText("x" 73 " y" 263 " w" 80, "Profile name 3")
		gcProfileEdit_3 := guiSettings.AddEdit("x" 150 " y" 260 " w" 592 " +BackgroundWhite",)
		gcProfileEdit_3.OnEvent("Change", (*) => Settings.ProfileEdit_3_Change())
		gcProfileEdit_3.TT := "Enter a profile name to insert into the [profile_name] or `n[profile_full_name] field tag(s) of the Command Line 3 template."

		gcProfileBrowseButton_3 := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 259 " w" nIconButtonWidth)
		gcProfileBrowseButton_3.OnEvent("Click", (*) => Settings.ProfileBrowseButton_3_Click())
		gcProfileBrowseButton_3.TT := "Browse for a profile to insert into the`n[profile_name] or [profile_full_name] field tag(s) of`nthe Command Line 3 template."
		GuiButtonIcon(gcProfileBrowseButton_3, 'imageres.dll', 206, 's16')

		gcTemplateLabel_3 := guiSettings.AddText("x" 60 " y" 286 " w" 80 " 0x2", "Command Line`ntemplate 3")
		gcTemplateEdit_3 := guiSettings.AddComboBox("x" 150 " y" 290 " w" 592 " +BackgroundWhite",)
		gcTemplateEdit_3.OnEvent("Change", (*) => Settings.TemplateEdit_3_Change())
		gcTemplateEdit_3.TT := "A template for a second command line that will execute one second after the second. This`ntemplate may include field tags such as [profile_name] and [profile_full_name] which`nwill be replaced by the contents of the Profile name 3 field.`n`n[profile_name]`          will be replaced by profile 3's name`n[profile_full_name]   will be replaced by profile 3's full path and filename."

		gcTestTemplateButton_3 := guiSettings.AddButton("x" Settings.mMetrics.Width - nIconButtonWidth*3 - 30 - 4 " y" 289 " w" nIconButtonWidth)
		gcTestTemplateButton_3.OnEvent("Click", (*) => Settings.TestTemplateButton_3_Click())
		gcTestTemplateButton_3.Enabled := false
		GuiButtonIcon(gcTestTemplateButton_3, 'icons.dll', 32, 's16') ;gear icon

		gcProfileLabel_3.Enabled := gcProfileEdit_3.Enabled := gcProfileBrowseButton_3.Enabled := gcTemplateLabel_3.Enabled := gcTemplateEdit_3.Enabled := false

		gcStatusLabel := guiSettings.AddText("Center " "x" 250 " y" 325 " w" 400 " h" 20)
		gcStatusLabel.SetFont("cRed s10 w600")

		gcAssignButton := guiSettings.AddButton("x" 30 " y" 338 " w" nButtonWidthWide " h" 35, "Assign ROM")
		gcAssignButton.OnEvent("Click", (*) => Settings.AssignButton_Click())
		gcAssignButton.TT := "Press to add the ROM Monitor action`n for the [Default] rom to the table."

		gcCancelAssignButton := guiSettings.AddButton("x" 30 + nButtonWidthWide + 5 " y" 338 " w" nButtonWidthWide " h" 35, "Cancel")
		gcCancelAssignButton.OnEvent("Click", (*) => Settings.CancelAssignButton_Click())
		gcCancelAssignButton.Enabled := false
		gcCancelAssignButton.TT := "Cancel the current Assign operation."

		gcActionListNameLabel := guiSettings.AddText("x" Settings.mMetrics.Width - 150 - 30 - 100 - 5 " y" 353 " w" 100 " 0x2", "Action list name:")
		gcActionListNameEdit := guiSettings.AddEdit("x" Settings.mMetrics.Width - 150 - 30 " y" 350 " w" 150 " +BackgroundWhite",)
		gcActionListNameEdit.OnEvent("Change", (*) => Settings.ActionListNameEdit_Change())
		gcActionListNameEdit.OnEvent("LoseFocus", (*) => Settings.ActionListNameEdit_LoseFocus())
		gcActionListNameEdit.TT := "This is the name that the Action List will be saved as. If you rename this,`nand save it as a new list, you may load it later by launching arcadeVFE with`nthe command line: vfe.exe <list name>."

		try gcActionListNameEdit.Text := IniRead(sIniFile, "General", "ActionListName", Settings.sActionListName)
		Settings.sActionListName := gcActionListNameEdit.Text
		global sUserFile := sUserFolder "\" gcActionListNameEdit.Text ".bgp"
		TrayMenu.SetMenuName("New", Settings.sActionListName)  

		gcListView := guiSettings.AddListView("-Multi" " r" 10 " x" 30 " y" 380 " w" Settings.mMetrics.Width - 30*2 " Grid", ["Device", "Action", "Sequence", "Annunciation", "", "Command", "", "Command 2", "", "", "", "", "Command 3"])
		fListView_ItemSelect := Settings.ListView_ItemSelect.Bind()
		gcListView.OnEvent("ItemSelect", fListView_ItemSelect)
		Settings.ResizeColumns()

		gcMoveUpButton := guiSettings.AddButton("x" 30 " y" 585 " w" nButtonWidthWide, "Move Up")
		gcMoveUpButton.OnEvent("Click", (*) => Settings.MoveUpButton_Click())
		gcMoveUpButton.Enabled := false
		gcMoveUpButton.TT := "Move the selected row up. If the action is part of a`nsequenced set, its sequence will be decremented."

		gcMoveDownButton := guiSettings.AddButton("x" 30 + nButtonWidthWide + 5 " y" 585 " w" nButtonWidthWide, "Move Down")
		gcMoveDownButton.OnEvent("Click", (*) => Settings.MoveDownButton_Click())
		gcMoveDownButton.Enabled := false
		gcMoveDownButton.TT := "Move the selected row down. If the action is part of a`nsequenced set, its sequence will be incremented."

		gcClearButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nButtonWidthWide*4 - 30 - 5*3 " y" 585 " w" nButtonWidthWide, "Clear all")
		gcClearButton.OnEvent("Click", (*) => Settings.ClearButton_Click())
		gcClearButton.Enabled := false
		gcClearButton.TT := "Clear all actions from the table."

		gcEditButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nButtonWidthWide*3 - 30 - 5*2 " y" 585 " w" nButtonWidthWide, "Copy action")
		gcEditButton.OnEvent("Click", (*) => Settings.EditButton_Click())
		gcEditButton.Enabled := false
		gcEditButton.TT := "Copy columns from the selected`nrow back into their edit fields."

		gcDeleteButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nButtonWidthWide*2 - 30 - 5 " y" 585 " w" nButtonWidthWide, "Delete action")
		gcDeleteButton.OnEvent("Click", (*) => Settings.DeleteButton_Click())
		gcDeleteButton.Enabled := false
		gcDeleteButton.TT := "Delete the selected row from the table."

		gcSaveButton := guiSettings.AddButton("x"  Settings.mMetrics.Width - nButtonWidthWide - 30 " y" 585 " w" nButtonWidthWide, "Save list")
		gcSaveButton.OnEvent("Click", (*) => Settings.SaveButton_Click())
		gcSaveButton.Enabled := false
		gcSaveButton.TT := "Save the Action List table."

		gcUserPreferencesGroupBox := guiSettings.AddGroupBox("x" 30 " y" 630 " w" 540 " h" 95, "User Preferences")

		gcApplication_Checkbox := guiSettings.AddCheckbox("x" 45 " y" 653 " w" 250, "Operate only when this application is running.")
		gcApplication_Checkbox.OnEvent("Click", (*) => Settings.Application_Checkbox_Click())
		gcApplication_Checkbox.TT := "This setting is recommended to avoid possible side`neffects when the application is not running."

		try gcApplication_Checkbox.Value := IniRead(sIniFile, "General", "MonitorApplication", 1)
		
		gcApplicationEdit := guiSettings.AddEdit("x" 60 " y" 670 " w" 150 " +BackgroundWhite",)
		gcApplicationEdit.OnEvent("Change", (*) => Settings.ApplicationEdit_Change())
		gcApplicationEdit.TT := "Enter the name (not including the path) of`nthe executable you want to monitor.`nFor example, RetroVRArcade.exe"
	
		try gcApplicationEdit.Text := IniRead(sIniFile, "General", "Application", "RetroVRArcade.exe")
		gcApplication_Checkbox.Enabled := gcApplicationEdit.Text ? true : false
		global bOnlyMonitorWhenApplicationLoaded := gcApplication_Checkbox.Enabled && gcApplication_Checkbox.Value == 1

		gcApplicationBrowseButton := guiSettings.AddButton("x" 212 " y" 669 " w" nButtonWidth, "Browse...")
		gcApplicationBrowseButton.OnEvent("Click", (*) => Settings.ApplicationBrowseButton_Click())
		gcApplicationBrowseButton.TT := "Browse for the executable representing the application you want to monitor."

		gcAlwaysAnnunciate_Checkbox := guiSettings.AddCheckbox("x" 300 " y" 700 " Check3", "Always voice annunciate")
		gcAlwaysAnnunciate_Checkbox.OnEvent("Click", (*) => Settings.AlwaysAnnunciate_Checkbox_Click())
		try gcAlwaysAnnunciate_Checkbox.Value := IniRead(sIniFile, "General", "AlwaysAnnunciate", 1)	
		gcAlwaysAnnunciate_Checkbox.TT := "Adjust when voice annunciation is used.`n`nChecked:      Always annunciate upon new game start.`nUnchecked:  Never annunciate (off).`nMinus:          Only annunciate on a profile change."

		gcBeep_Checkbox := guiSettings.AddCheckbox("x" 300 " y" 677, "Beep on profile change")
		gcBeep_Checkbox.OnEvent("Click", (*) => Settings.Beep_Checkbox_Click())
		try gcBeep_Checkbox.Value := IniRead(sIniFile, "General", "BeepOnProfileChange", 0)	
		gcBeep_Checkbox.TT := "Checked:        Beep whenever a profile is changed.`nUnchecked:   Never beep (off)"

		gcToolTip_Checkbox := guiSettings.AddCheckbox("x" 460 " y" 700, "Show Tooltips")
		gcToolTip_Checkbox.OnEvent("Click", (*) => Settings.ToolTip_Checkbox_Click())
		try gcToolTip_Checkbox.Value := IniRead(sIniFile, "General", "ShowToolTips", 1)	
		gcToolTip_Checkbox.TT := "Check or uncheck to show/hide tooltips on this screen."

		gcRawAccel_Checkbox := guiSettings.AddCheckbox("x" 45 " y" 700, "Run RawAccel when the application starts.")
		gcRawAccel_Checkbox.OnEvent("Click", (*) => Settings.RawAccel_Checkbox_Click())
		try gcRawAccel_Checkbox.Value := IniRead(sIniFile, "General", "LoadRawAccel", 0)	
		gcRawAccel_Checkbox.TT := "Run RawAccel when the application starts`nand close it when the application terminates.`n`nRawAccel is expected to be in a subfolder called`n\RawAccel within the arcadeVFE folder."

		if (!FileExist(A_ScriptDir "\RawAccel\rawaccel.exe") || gcApplicationEdit.Text == '' || gcApplication_Checkbox.Value == 0)
			gcRawAccel_Checkbox.Enabled := false
        
		try global sRawAccelExe := IniRead(sIniFile, "General", "RawAccelExe", sRawAccelExe)

		gcShowGameInfo_Checkbox := guiSettings.AddCheckbox("x" 300 " y" 653, "Show Game Info")
		gcShowGameInfo_Checkbox.OnEvent("Click", (*) => Settings.ShowGameInfo_Checkbox_Click())
		try gcShowGameInfo_Checkbox.Value := IniRead(sIniFile, "General", "ShowGameInfo", 0)	
		gcShowGameInfo_Checkbox.TT := "Show Game Info when the application above starts`nand close it when the application terminates."

		if (gcApplicationEdit.Text == '' || gcApplication_Checkbox.Value == 0)
			gcShowGameInfo_Checkbox.Enabled := false
        
		try global sRawAccelExe := IniRead(sIniFile, "General", "RawAccelExe", sRawAccelExe)
		
		gcCloseButton := guiSettings.AddButton("x" Settings.mMetrics.Width - nButtonWidthWide - 30 " y" 690 " w" nButtonWidthWide " h" 30, "Close")
		gcCloseButton.OnEvent("Click", (*) => Settings.CloseButton_Click())
		gcCloseButton.TT := "Close and exit this Settings dialog."
	}

	/**
	 * Start SDL subsystem and initialize list of game devices
	 * https://www.autohotkey.com/boards/viewtopic.php?t=115995
	 * ;https://wiki.libsdl.org/SDL2/APIByCategory
	 */
	static InitDevices()
	{
		SDL2.SDL_Init(SDL_INIT_EVERYTHING := -1) ;~ Init All

		SDL2.SDL_InitSubSystem(SDL_INIT_JOYSTICK := 0x00000200)
		SDL2.SDL_JoystickEventState(1)

		joyNum := SDL2.SDL_NumJoysticks() 

		if (joyNum > 0)
		{
			loop joyNum
			{
				i := A_index - 1 ;~ because SDL joystick index start from 0
				joystick := SDL2.SDL_JoystickOpen(i)
				jidx := SDL2.SDL_JoystickInstanceID(joystick)
				pguid := SDL2.SDL_JoystickGetGUID(joystick)
				name := SDL2.SDL_JoystickName(joystick)

				;each unique guid can have multiple, same-named devices
				;(like XBox controllers), so index each in an array
				if !mDevices.Has(pguid) {
					mDevices[pguid] := Array()
				}
				mDeviceInfo := Map()
				mDeviceInfo["name"] := name
				mDeviceInfo["index"] := jidx
				mDevices[pguid].Push(mDeviceInfo)
			}

			;Add "ROM Monitor"
			mDevices["000"] := Array()
			mDeviceInfo := Map()
			mDeviceInfo["name"] := "ROM Monitor"
			mDeviceInfo["index"] := 1
			mDevices["000"].Push(mDeviceInfo)

			;Add "Keyboard" device
			mDevices["001"] := Array()
			mDeviceInfo := Map()
			mDeviceInfo["name"] := "Keyboard"
			mDeviceInfo["index"] := 1
			mDevices["001"].Push(mDeviceInfo)

			;Create the list to display in the devices list
			for guid, j in mDevices
			{
				for device_index, device_info in mDevices[guid]
				{
					if (mDevices[guid].Length > 1)
					{
						aDevices.Push(device_info["name"] " " device_index)
						mDeviceIndex[device_info["index"]] := aDevices.Length 
					}
					else
					{
						aDevices.Push(device_info["name"])
						mDeviceIndex[device_info["index"]] := aDevices.Length
					}
				}
			}

			gcDevices.Add(aDevices)
			gcDevices.Value := 1
		}
	}

	/**
	 * Templates are the command line templates used to load game controller profiles. The will normally include a
	 * template tag in brackets whose name determines how it is formatted:
	 * 
	 * [profile_name] = use the filename only
	 * [profile_full_name] = use the full pathname and filename
	 */
	static ReadTemplates()
	{
		if (!FileExist(sTemplatesFile))
		{
			sJSON := JSON.stringify(aDefaultTemplates)

			fTemplatesFile := FileOpen(sTemplatesFile, "w")
			fTemplatesFile.Write(sJSON)
			fTemplatesFile.Close()
		}

		;Now rebuild the global oTemplates object
		sJSON := FileRead(sTemplatesFile)
		global oTemplates := JSON.parse(sJSON)

		gcTemplateEdit.Add(oTemplates)
		try gcTemplateEdit.Choose(1)
		gcTestTemplateButton.TT := "Test this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)

		gcTemplateEdit_2.Add(oTemplates)
		try gcTemplateEdit_2.Choose(1)
		gcTestTemplateButton_2.TT := "Test this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)

		gcTemplateEdit_3.Add(oTemplates)
		try gcTemplateEdit_3.Choose(1)
		gcTestTemplateButton_3.TT := "Test this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
	}

	/**
	 * Reads JSON config file containing all current button configurations,
	 * and populates the list view.
	 */
	static ReadActionList()
	{
		global

		;read any saved configuration
		if (FileExist(sUserFile))
		{
			sJSON := FileRead(sUserFile)
			oActions := JSON.parse(sJSON)
			oActions.Default := ""
			
			for device, j in oActions
				for button, t in j
					for sequence, info in t
					iRow := gcListView.Insert(1000,,device, button, sequence, info.Get("annunciation", ""), info.Get("profile", ""), info.Get("command_line", ""), info.Get("profile_2", ""),
			                info.Get("command_line_2", ""), info.Get("template", ""), info.Get("template_2", ""), info.Get("template_3", ""), info.Get("profile_3", ""), info.Get("command_line_3", ""))

			Settings.ResizeColumns()

			if (gcListView.GetCount() > 0)
				gcClearButton.Enabled := true
			else
				gcClearButton.Enabled := false
		}
	}

	/**
	 * Clear all entries in the Actions table
	 */
	static ClearTable()
	{
		gcListView.Delete()
		gcClearButton.Enabled := false

		Settings.ResizeColumns()
	}

	/**
	 * Program Exit/Close
	 * @returns {Integer} 
	 */
	static Settings_Close(*)
	{
		Sleep 0

		Settings.CancelAssign()

		result := "Yes"
		if (gcSaveButton.Enabled)
		{
			result := MsgBox("There unsaved changes to the Action List. Are you sure you want to exit?`n`nPress 'Yes' to exit without saving or 'No' to return to this screen.", "Close Settings?", 36)
		}
		else
		{
			if (gcActionListNameEdit.Text != Settings.sActionListName)
			{
				;In this case where there is nothing to save, but the user changed the Action List name, we just
				;change the name and make that the new default.
				if (FileExist(sUserFile))
					try FileMove(sUserFile, sUserFolder "\" gcActionListNameEdit.Text ".bgp")
				TrayMenu.SetMenuName(Settings.sActionListName, gcActionListNameEdit.Text)
				Settings.sActionListName := gcActionListNameEdit.Text
				global sUserFile := sUserFolder "\" Settings.sActionListName ".bgp"
				IniWrite(Settings.sActionListName, sIniFile, "General", "ActionListName")
			}
		}

		if (result == "Yes")
		{
			;if the rom folder was changed, reset the access dates
			if (gcROMMonitorFolderEdit.Text != Settings.sROMFolderOGText)
			{
				Settings.sROMFolderOGText := gcROMMonitorFolderEdit.Text
				StartRomWatcher()
			}

			;Refresh the sCurrentROM timestamp since it might get replayed
			;if (sCurrentROM) ;sCurrentROM is a global
			;{
			;	global bSuppressLastAccess := true
			;	FileSetTime DateAdd(A_Now, -7, "days"), sCurrentRom, "A"
			;}

			gcSaveButton.Enabled := false
			guiSettings.Hide()
			AppLog.LogLine("INFO: Closed Settings dialog.`n")
			ToolTip() ;kill any tooltips
			global bCancel := false
			Poll() ;resume monitoring
		}
		else
			return true
	}

	/**
	 * Fills the ROM list with gamenames. Uses the Game.xml file to obtain
	 * the full names of the games represented by the roms.
	 */
	static FillRomList()
	{
		aGameList := Array()     ;the gamelist to be assigned to the list control
		sGameList := ""          ;used to sort the list
		gcROMDropDown.Delete()   ;make sure dropdown control is empty
		mRomsByName["[Default]"] := "[Default]"

		;Loop through all the rom files. These must have a *.zip extension
		Loop Files gcROMMonitorFolderEdit.Text "\*.zip"
		{
			SplitPath(A_LoopFileName,,,, &OutNameNoExt)
			oGameInfo := ReadListXML.GetXMLMetaInfo(sGamesXMLFile, OutNameNoExt)
			
			if (oGameInfo)
			{
				sGameList := sGameList oGameInfo["description"] "`n"
				mRomsByName[oGameInfo["description"]] := OutNameNoExt 
			}
		}

		sGameList := Sort(sGameList)            ;sort the list by game name
		sGameList := sGameList, "`n"      
		sGameList := "[Default]`n" sGameList    ;make sure "[Default]" is at the top of the list
		aGameList := StrSplit(sGameList, "`n")

		gcROMDropDown.Add(aGameList)
		try gcROMDropDown.Value := 1
	}

	;============================================
	; Settings Screen events
	;============================================

	/**
	 * Save the button configurations in the ListView to a JSON configuration file. 
	 */
	static SaveButton_Click(*)
	{
		global bCancelAssign := true

		result := MsgBox("Are you sure you would like to save these settings?", "Save Settings?", 4132)

		if (result == "No")
			return

		;Handle changing Action list name
		if (gcActionListNameEdit.Text != Settings.sActionListName)
		{
			;We don't need to worry about gcActionListNameEdit.Text being blank since the field is automatically
			;reverted to the current Settings.sActionListName by the control itself anytime it is blank and loses focus.

			result := "Yes"
			result := MsgBox("You have changed the Action list name.`n`nPress 'Yes' to rename the list or 'No' to keep the previous list and save this one as the new default.`n`nSaved Action lists may be loaded by providing their name as a command line parameter when launching arcadeVFE.", "Action List Rename or Save New?", 4131)

			if (result == "Cancel")
				return

			if (result == "Yes") ;Rename option chosen
			{
				try FileDelete(sUserFile)
				AppLog.LogLine("INFO: Renamed Action list (from: `"" Settings.sActionListName "`" to `"" gcActionListNameEdit.Text "`").`n")
			}

			TrayMenu.SetMenuName(Settings.sActionListName, gcActionListNameEdit.Text)
			Settings.sActionListName := gcActionListNameEdit.Text
			global sUserFile := sUserFolder "\" Settings.sActionListName ".bgp"
			IniWrite(Settings.sActionListName, sIniFile, "General", "ActionListName")
		}

		mConfig := Map()

		Loop gcListView.GetCount()
		{
			if (gcListView.GetText(A_Index, Settings.DEVICE))
			{
				mInfo := Map()
				mInfo["annunciation"] := gcListView.GetText(A_Index, Settings.ANNUNC)
				mInfo["profile"] := gcListView.GetText(A_Index, Settings.PROFILE) ;this is a hidden column
				mInfo["command_line"] := gcListView.GetText(A_Index, Settings.COMMAND)
				mInfo["profile_2"] := gcListView.GetText(A_Index, Settings.PROFILE_2)  ;this is a hidden column
				mInfo["command_line_2"] := gcListView.GetText(A_Index, Settings.COMMAND_2)
				mInfo["template"] := gcListView.GetText(A_Index, Settings.TEMPLATE)    ;this is a hidden column
				mInfo["template_2"] := gcListView.GetText(A_Index, Settings.TEMPLATE_2) ;this is a hidden column
				mInfo["template_3"] := gcListView.GetText(A_Index, Settings.TEMPLATE_3) ;this is a hidden column
				mInfo["profile_3"] := gcListView.GetText(A_Index, Settings.PROFILE_3)  ;this is a hidden column
				mInfo["command_line_3"] := gcListView.GetText(A_Index, Settings.COMMAND_3)
				if (!mConfig.Has(gcListView.GetText(A_Index, Settings.DEVICE))) 
					mConfig[gcListView.GetText(A_Index, Settings.DEVICE)] := Map()
				
				if (!mConfig[gcListView.GetText(A_Index, Settings.DEVICE)].Has(gcListView.GetText(A_Index, Settings.ACTION))) 
					mConfig[gcListView.GetText(A_Index, Settings.DEVICE)][gcListView.GetText(A_Index, Settings.ACTION)] := Map()

				mConfig[gcListView.GetText(A_Index, Settings.DEVICE)][gcListView.GetText(A_Index, Settings.ACTION)][gcListView.GetText(A_Index, Settings.SEQUENCE)] := mInfo
			}
		}

		sJSON := JSON.stringify(mConfig)

		fConfigFile := FileOpen(sUserFile, "w")

		fConfigFile.Write(sJSON)
		fConfigFile.Close()

		;Now rebuild the oActions map
		sJSON := FileRead(sUserFile)
		global oActions := JSON.parse(sJSON)

		gcSaveButton.Enabled := false

		AppLog.LogLine("INFO: Saved Action list as `"" sUserFile "`".`n")
	}

	/**
	 * Handle requests to Exit the Settings screen
	 */
	static CloseButton_Click(*)
	{
		Settings.Settings_Close()
	}

	static Devices_Change(*)
	{
		bROMControlVisible := true
		bGameControlVisible := false

		if (gcDevices.Text == "ROM Monitor")
		{
			gcAssignButton.Text := "Assign ROM"
			gcAssignButton.TT := "Press to add the ROM Monitor action`nfor the " mRomsByName[gcROMDropDown.Text] " rom to the table."
		}
		else
		{
			if (gcDevices.Text == "Keyboard")
			{
				gcAssignButton.Text := "Assign Key"
				gcAssignButton.TT := "Press to assign a key or key combination,`nadd the action to the table."
			}
			else ;must be a game controller
			{
				gcAssignButton.Text := "Assign Button"
				gcAssignButton.TT := "Press to assign button from the " gcDevices.Text " device,`nnand add the action to the table."
				bGameControlVisible := true

				Settings.RadioButtonStateUpdate()
			}

			bROMControlVisible := false
		}

		;Set visibilty of controls only used in ROM Monitor Mode
		gcROMMonitorFolderBrowseButton.Visible := bROMControlVisible
		gcROMMonitorFolderEdit.Visible := bROMControlVisible
		gcROMMonitorFolderLabel.Visible := bROMControlVisible
		gcROMDropDownLabel.Visible := bROMControlVisible
		gcROMDropDown.Visible := bROMControlVisible
		gcROMDropDownGameInfo.Visible := bROMControlVisible
		gcROMDropDownGameVersion.Visible := bROMControlVisible
		gcROMDropDownGameRom.Visible := bROMControlVisible

		;Set visibility of controls only used in Game Controller mode
		gcButtonOptionsGroupBox.Visible := bGameControlVisible
		gcSendKey_Radio.Visible := bGameControlVisible
		gcGameInfo_Radio.Visible := bGameControlVisible
		gcCommandLine_Radio.Visible := bGameControlVisible
		gcSendKey_ComboBox.Visible := bGameControlVisible
		gcGameInfo_ComboBox.Visible := bGameControlVisible
	}

	static TemplateEdit_Change(*)
	{
		gcTestTemplateButton.TT := "Run this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)

		if (gcTemplateEdit.Text == "")
		{
			gcAddTemplateButton.Enabled := false
			gcRemoveTemplateButton.Enabled := false
			gcTestTemplateButton.Enabled := false
			return
		}

		gcTestTemplateButton.Enabled := true

		;Disable Add button and enable remove button if template already exists
		aTemplates := Array()
		aTemplates := ControlGetItems(gcTemplateEdit)
		for i, j in aTemplates
		{
			if (j == gcTemplateEdit.Text)
			{
				gcAddTemplateButton.Enabled := false
				gcRemoveTemplateButton.Enabled := true
			    return
			}
		}

		;Template wasn't found
		gcAddTemplateButton.Enabled := true
		gcRemoveTemplateButton.Enabled := false
	}

	static TemplateEdit_2_Change(*)
	{
		gcTestTemplateButton_2.TT := "Run this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
	}

	static TemplateEdit_3_Change(*)
	{
		gcTestTemplateButton_3.TT := "Run this command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
	}

	static AnnunciationEdit_Change(*)
	{
		if (gcAnnunciationEdit.Text)
			gcAnnunciationTestButton.Enabled := true
		else
			gcAnnunciationTestButton.Enabled := false
	}

	static MoveUpButton_Click(*)
	{
		Settings.MoveRow(-1)
	}

	static MoveDownButton_Click(*)
	{
		Settings.MoveRow(1)
	}

	/**
	 * Moves a row up or down in the Action List
	 * @param iDirection - 1 = down, -1 = up
	 */
	static MoveRow(iDirection)
	{
		iRow := gcListView.GetNext()

		if ((iDirection == 1 && iRow < gcListView.GetCount()) || (iDirection == -1 && iRow > 1))
		{
			sDevice := gcListView.GetText(iRow, Settings.DEVICE)
			sButton := gcListView.GetText(iRow, Settings.ACTION)
			sSequence := gcListView.GetText(iRow, Settings.SEQUENCE)
			sAnnunciation := gcListView.GetText(iRow, Settings.ANNUNC)
			sProfile := gcListView.GetText(iRow, Settings.PROFILE)
			sCommandLine := gcListView.GetText(iRow, Settings.COMMAND)
			sProfile_2 := gcListView.GetText(iRow, Settings.PROFILE_2)
			sCommandLine_2 := gcListView.GetText(iRow, Settings.COMMAND_2)
			sTemplate := gcListView.GetText(iRow, Settings.TEMPLATE)
			sTemplate_2 := gcListView.GetText(iRow, Settings.TEMPLATE_2)
			sTemplate_3 := gcListView.GetText(iRow, Settings.TEMPLATE_3)
			sProfile_3 := gcListView.GetText(iRow, Settings.PROFILE_3)
			sCommandLine_3 := gcListView.GetText(iRow, Settings.COMMAND_3)

			gcListView.Delete(iRow)
		
			iRow := gcListView.Insert(iRow + iDirection,,sDevice, sButton, sSequence, sAnnunciation, sProfile, sCommandLine, sProfile_2, sCommandLine_2, sTemplate, sTemplate_2, sTemplate_3, sProfile_3, sCommandLine_3)
			gcListView.Modify(iRow, "+Select")
			gcListView.Modify(iRow, "Vis")
		}

		Settings.ResequenceList()

		gcSaveButton.Enabled := true
	}

	static AddTemplateButton_Click(*)
	{
		if (gcTemplateEdit.Text == "")
			return
		
		gcTemplateEdit.Add([gcTemplateEdit.Text])
		new_item := Settings.AddTemplates()

		;Also update gcTemplateEdit_2
		Settings.SyncTemplates()

		gcTestTemplateButton.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)
		gcTestTemplateButton_2.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
		gcTestTemplateButton_3.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)

		gcRemoveTemplateButton.Enabled := true
	}

	static RemoveTemplateButton_Click(*)
	{
		last := gcTemplateEdit.Value
		try gcTemplateEdit.Delete(gcTemplateEdit.Value)

		try {
			gcTemplateEdit.Choose(last)
		}
		catch
		{
			try gcTemplateEdit.Choose(last-1)
		}

		Settings.AddTemplates()

		;Also update gcTemplateEdit_2
		Settings.SyncTemplates()

		if (gcTemplateEdit.Text == "")
		{
			gcAddTemplateButton.Enabled := false
			gcRemoveTemplateButton.Enabled := false
		}

		gcTestTemplateButton.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)
		gcTestTemplateButton_2.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
		gcTestTemplateButton_3.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
	}

	static TestTemplateButton_Click(*)
	{
		RunCommandLine(Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text))
	}

	static TestTemplateButton_2_Click(*)
	{
		RunCommandLine(Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text))
	}

	static TestTemplateButton_3_Click(*)
	{
		RunCommandLine(Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text))
	}

	static ListView_ItemSelect(Item, Selected)
	{
		if (gcListView.GetNext())
		{
			gcDeleteButton.Enabled := true
			gcEditButton.Enabled := true
			gcMoveUpButton.Enabled := true
			gcMoveDownButton.Enabled := true
		}
		else
		{
			if (gcListView.GetCount() > 0)
			{
				gcListView.Modify(gcListView.GetCount(), "+Select")
				gcListView.Modify(gcListView.GetCount(), "Vis")
			}
			else
			{
				gcDeleteButton.Enabled := false
				gcEditButton.Enabled := false
				gcMoveUpButton.Enabled := false
				gcMoveDownButton.Enabled := false
			}
		}
	}

	static ClearButton_Click(*)
	{
		Settings.ClearTable()
		gcSaveButton.Enabled := true

		gcEditButton.Enabled := false
		gcDeleteButton.Enabled := false
	}

	static DeleteButton_Click(*)
	{
		iRow := gcListView.GetNext()

		gcListView.Delete(gcListView.GetNext())
		if (gcListView.GetCount() == 0)
			gcSaveButton.Enabled := false
		else
			gcSaveButton.Enabled := true

		if gcListView.GetCount() > 0
		{
			gcListView.Modify(iRow, "+Select")
			Settings.ResequenceList()
		}
		else
			gcClearButton.Enabled := false

		Settings.ResizeColumns()
	}

	static EditButton_Click(*)
	{
		iRow := gcListView.GetNext()

		try {
			gcDevices.Text := gcListView.GetText(iRow, Settings.DEVICE)
			Settings.Devices_Change()
		}
		catch
		{
			MsgBox("Cannot set device since `"" gcListView.GetText(iRow, Settings.DEVICE) "`" no longer exists.", "Edit Warning", 16)
		}

		if (gcListView.GetText(iRow, Settings.DEVICE) == "ROM Monitor")
		{
			try {
				if (gcListView.GetText(iRow, Settings.ACTION) == "[Default]")
					sGame := "[Default]"
				else
					sGame := ReadListXML.GetXMLMetaInfo(sGamesXMLFile, gcListView.GetText(iRow, Settings.ACTION))["description"]
				gcROMDropDown.Text := sGame
			}
			catch
			{
				MsgBox("Cannot set game since `"" gcListView.GetText(iRow, Settings.ACTION) "`" is no longer in the list.", "Edit Warning", 16)
			}

			Settings.SetRomInfo()
		}

		gcAnnunciationEdit.Text := gcListView.GetText(iRow, Settings.ANNUNC)
		gcProfileEdit.Text := gcListView.GetText(iRow, Settings.PROFILE)

		;handle case where action is a Send Key action
		if (gcListView.GetText(iRow, Settings.DEVICE) != "ROM Monitor" && gcListView.GetText(iRow, Settings.DEVICE) != "Keyboard" && InStr(gcListView.GetText(iRow, Settings.COMMAND), "Send Key:"))
		{   
			iStartPos := InStr(gcListView.GetText(iRow, Settings.COMMAND), "{") + 1 
			iEndPos := InStr(gcListView.GetText(iRow, Settings.COMMAND), "}")
			iLength := iEndPos - iStartPos

			gcSendKey_ComboBox.Text := SubStr(gcListView.GetText(iRow, Settings.COMMAND), iStartPos, iLength)
			gcSendKey_Radio.Value := 1
		}
		;handle case where action is a Send Nav action
		else if (gcListView.GetText(iRow, Settings.DEVICE) != "ROM Monitor" && gcListView.GetText(iRow, Settings.DEVICE) != "Keyboard" && InStr(gcListView.GetText(iRow, Settings.COMMAND), "Send Nav:"))
		{   
			iStartPos := InStr(gcListView.GetText(iRow, Settings.COMMAND), "{") + 1 
			iEndPos := InStr(gcListView.GetText(iRow, Settings.COMMAND), "}")
			iLength := iEndPos - iStartPos

			gcGameInfo_ComboBox.Text := SubStr(gcListView.GetText(iRow, Settings.COMMAND), iStartPos, iLength)
			gcGameInfo_Radio.Value := 1
		}
		else
			gcCommandLine_Radio.Value := 1
		
		gcTemplateEdit.Text := gcListView.GetText(iRow, Settings.TEMPLATE) ;this is a hidden column containing the pre-filled-in template
		gcTestTemplateButton.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)

		if (gcListView.GetText(iRow, Settings.PROFILE_2) || gcListView.GetText(iRow, Settings.COMMAND_2))
			Settings.ToggleCheckedState(2 ,true)
		else
			Settings.ToggleCheckedState(2, false)

		gcProfileEdit_2.Text := gcListView.GetText(iRow, Settings.PROFILE_2)
		gcTemplateEdit_2.Text := gcListView.GetText(iRow, Settings.TEMPLATE_2) ;this is a hidden column containing the pre-filled-in template
		gcTestTemplateButton_2.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)

		if (gcListView.GetText(iRow, Settings.PROFILE_3) || gcListView.GetText(iRow, Settings.COMMAND_3))
			Settings.ToggleCheckedState(3 ,true)
		else
			Settings.ToggleCheckedState(3, false)

		gcProfileEdit_3.Text := gcListView.GetText(iRow, Settings.PROFILE_3)
		gcTemplateEdit_3.Text := gcListView.GetText(iRow, Settings.TEMPLATE_3) ;this is a hidden column containing the pre-filled-in template
		gcTestTemplateButton_3.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
	}

	static AnnunciationTestButton_Click(*)
	{
		oVoice.Speak(gcAnnunciationEdit.Text)
	}

	static Profile_2_Checkbox_Click(*)
	{
		Settings.ToggleCheckedState(2, gcProfile_2_Checkbox.Value)
	}

	static Profile_3_Checkbox_Click(*)
	{
		Settings.ToggleCheckedState(3, gcProfile_3_Checkbox.Value)
	}

	static ToolTip_Checkbox_Click(*)
	{
		IniWrite(gcToolTip_Checkbox.Value, sIniFile, "General", "ShowToolTips")
		ToolTip()
	}

	static AlwaysAnnunciate_Checkbox_Click(*)
	{
		IniWrite(gcAlwaysAnnunciate_Checkbox.Value, sIniFile, "General", "AlwaysAnnunciate")
	}

	static Beep_Checkbox_Click(*)
	{
		IniWrite(gcBeep_Checkbox.Value, sIniFile, "General", "BeepOnProfileChange")
	}

	static ProfileEdit_Change(*)
	{
		gcTestTemplateButton.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)
	}

	static ProfileEdit_2_Change(*)
	{
		gcTestTemplateButton_2.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
	}

	static ProfileEdit_3_Change(*)
	{
		gcTestTemplateButton_3.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
	}

	static ROMMonitorFolderEdit_Change(*)
	{
		IniWrite(gcROMMonitorFolderEdit.Text, sIniFile, "General", "ROMFolder")
		Settings.FillRomList()
	}

	static ROMMonitorFolderBrowseButton_Click(*)
	{
		global gcROMMonitorFolderEdit, gcAssignButton

		sFolder := FileSelect("D", gcROMMonitorFolderEdit.Value)
		gcROMMonitorFolderEdit.Value := sFolder

		IniWrite(gcROMMonitorFolderEdit.Text, sIniFile, "General", "ROMFolder")
		Settings.FillRomList()
	}

	static ROMDropDown_Change(*)
	{
		Settings.SetRomInfo()
	}

	static SendKey_Radio_Click(*)
	{
		Settings.RadioButtonStateUpdate()
	}

	static CommandLine_Radio_Click(*)
	{
		Settings.RadioButtonStateUpdate()
	}

	static GameInfo_Radio_Click()
	{
		Settings.RadioButtonStateUpdate()
	}

	static SendKey_ComboBox_Change(*)
	{
		Settings.RadioButtonStateUpdate()
		gcSendKey_Radio.Value := true
	}

	static GameInfo_ComboBox_Change(*)
	{
		Settings.RadioButtonStateUpdate()
		gcGameInfo_Radio.Value := true
	}

	static ProfileBrowseButton_Click(*)
	{	
		global gcProfileEdit, gcAssignButton

		gcProfileEdit.Value := FileSelect("S",	gcProfileEdit.Value)

		if (gcProfileEdit.Value != "")
		{
			gcTestTemplateButton.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)
			gcAssignButton.Enabled := true
		}
	}

	static ProfileBrowseButton_2_Click(*)
	{
		global gcProfileEdit_2, gcAssignButton

		gcProfileEdit_2.Value := FileSelect("S",	gcProfileEdit_2.Value)

		if (gcProfileEdit.Value != "")
		{
			gcTestTemplateButton_2.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
			gcAssignButton.Enabled := true
		}
	}

	static ProfileBrowseButton_3_Click(*)
	{
		global gcProfileEdit_3, gcAssignButton

		gcProfileEdit_3.Value := FileSelect("S",	gcProfileEdit_3.Value)

		if (gcProfileEdit.Value != "")
		{
			gcTestTemplateButton_3.TT := "Test the command line:`n" Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
			gcAssignButton.Enabled := true
		}
	}

	static CancelAssignButton_Click(*)
	{	
		Settings.CancelAssign()
	}

	static Application_Checkbox_Click(*)
	{
		IniWrite(gcApplication_Checkbox.Value, sIniFile, "General", "MonitorApplication")
		global bOnlyMonitorWhenApplicationLoaded := gcApplication_Checkbox.Enabled && gcApplication_Checkbox.Value == 1

		gcRawAccel_Checkbox.Enabled := FileExist(A_ScriptDir "\RawAccel\rawaccel.exe") && gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
		gcShowGameInfo_Checkbox.Enabled := gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
	}

	static RawAccel_Checkbox_Click(*)
	{
		IniWrite(gcRawAccel_Checkbox.Value, sIniFile, "General", "LoadRawAccel")
	}

	static ShowGameInfo_Checkbox_Click()
	{
		IniWrite(gcShowGameInfo_Checkbox.Value, sIniFile, "General", "ShowGameInfo")
	}

	static ApplicationEdit_Change(*)
	{
		IniWrite(gcApplicationEdit.Text, sIniFile, "General", "Application")
		gcApplication_Checkbox.Enabled := gcApplicationEdit.Text ? true : false	
		global bOnlyMonitorWhenApplicationLoaded := gcApplication_Checkbox.Enabled && gcApplication_Checkbox.Value == 1

		gcRawAccel_Checkbox.Enabled := FileExist(A_ScriptDir "\RawAccel\rawaccel.exe") && gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
		gcShowGameInfo_Checkbox.Enabled := gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
	}

	static ApplicationBrowseButton_Click(*)
	{
		sApplicationPath := FileSelect("S",,, "Executables (*.exe)")
		SplitPath(sApplicationPath,,,&OutExt, &OutNameNoExt)
		gcApplicationEdit.Text := OutNameNoExt "." OutExt
		IniWrite(gcApplicationEdit.Text, sIniFile, "General", "Application")
		gcApplication_Checkbox.Enabled := gcApplicationEdit.Text ? true : false
		global bOnlyMonitorWhenApplicationLoaded := gcApplication_Checkbox.Enabled && gcApplication_Checkbox.Value == 1

		gcRawAccel_Checkbox.Enabled := FileExist(A_ScriptDir "\RawAccel\rawaccel.exe") && gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
		gcShowGameInfo_Checkbox.Enabled := gcApplicationEdit.Text && gcApplication_Checkbox.Value ? true : false
	}

	static ActionListNameEdit_Change(*)
	{
		
	}

	static ActionListNameEdit_LoseFocus(*)
	{
		if (gcActionListNameEdit.Text == "")
			gcActionListNameEdit.Text := Settings.sActionListName
	}

	static Key_Callback(Hotkey)
	{
		if (Settings.WriteActionToList("Keyboard", Hotkey))
		{
			Settings.DisableKeyboardHotkeys()
			Settings.SetAssignButtonState(true)
		}
	}

	/**
	 * Process input for game controller button presses or Keyboard key presses during the 
	 * Assign process. Adds the button or key press to the ListView control along with the
	 * annunciation and command lines.
	 */
	static AssignButton_Click(*)
	{
		global bCancelAssign

		Settings.SetAssignButtonState(false)

		if (gcDevices.Text == "ROM Monitor")
		{
			if (mRomsByName.Has(gcROMDropDown.Text))
				sROM := mRomsByName[gcROMDropDown.Text]
			else
				sROM := gcROMDropDown.Text

			Settings.WriteActionToList("ROM Monitor", sROM)
			Settings.SetAssignButtonState(true)

			return
		}	

		gcStatusLabel.Text := "Waiting for input..."

		if (gcDevices.Text == "Keyboard")
		{
			Settings.ActivateKeyboardHotkeys()
			return
		}
	
		;Buffer to receive SDL_Event
		evtBuffer := Buffer(56,0)

		;purge the buffer
		SDL2.SDL_PumpEvents()
		SDL2.SDL_FlushEvent(SDL_EventType.SDL_JOYBUTTONDOWN)

		;Handle button presses via SDL_Event
		loop
		{
			PollEvent := SDL2.SDL_PollEvent(evtBuffer)
			evt := SDL2DLL.SDL_Event(evtBuffer)
			if (bCancelAssign)
			{
					bCancelAssign := false
					break
			}
			
			if (PollEvent != 0)
			{
				switch evt.type {
					case SDL_EventType.SDL_QUIT: ; Close evt
					SDL2.SDL_Quit()
					break			 

					case SDL_EventType.SDL_JOYBUTTONDOWN: ;, SDL_EventType.SDL_JOYBUTTONUP: ; Joy button evt
						if (Settings.WriteActionToList(aDevices[mDeviceIndex[evt.jbutton.which]], evt.jbutton.button))
							break
				}
			}
			SDL2.SDL_Delay(1)
		}

		Settings.SetAssignButtonState(true)
	}

	;====================================================
	;  Settings screen support functions (private)
	;====================================================

	/**
	 * Write an action to the ListView list.
	 * 
	 * @param sDevice - "ROM Monitor", "Keyboard" or game device name
	 * @param sAction - rom name (no extension), button number, or keyboard key
	 * @returns {Integer} - 1 is a success, 0 is a duplicate
	 */
	static WriteActionToList(sDevice, sAction)
	{
		cl := Settings.GetFormattedCommandLine(gcProfileEdit.Text, gcTemplateEdit.Text)
		cl_2 := ""
		pe := gcProfileEdit.Text
		pe_2 := ""
		te := gcTemplateEdit.Text
		te_2 := ""
		cl_3 := ""
		pe_3 := ""
		te_3 := ""

		if (gcSendKey_Radio.Value)
		{
			cl := "Send Key: {" gcSendKey_ComboBox.Text "}"
			pe := te := ""
		}
		else if (gcGameInfo_Radio.Value)
		{
			cl := "Send Nav: {" gcGameInfo_ComboBox.Text "}"
			pe := te := ""
		}
		else 
		{
			if (gcProfile_2_Checkbox.Value)
			{
				cl_2 := Settings.GetFormattedCommandLine(gcProfileEdit_2.Text, gcTemplateEdit_2.Text)
				pe_2 := gcProfileEdit_2.Text
				te_2 := gcTemplateEdit_2.Text

				;Determines whether to show the second Command column
				Settings.iCommandLinesUsed := Settings.iCommandLinesUsed < 2 ? 2 : Settings.iCommandLinesUsed 
			}
			if (gcProfile_3_Checkbox.Value)
			{
				cl_3 := Settings.GetFormattedCommandLine(gcProfileEdit_3.Text, gcTemplateEdit_3.Text)
				pe_3 := gcProfileEdit_3.Text
				te_3 := gcTemplateEdit_3.Text

				;Determines whether to show the third Command column
				Settings.iCommandLinesUsed := Settings.iCommandLinesUsed < 3 ? 3 : Settings.iCommandLinesUsed 
			}
		}

		;if the device/action is a duplicate
		if (iRow := Settings.ItemInList(sDevice, sAction, cl, cl_2, cl_3))
		{
			sOGMessage := gcStatusLabel.Text
			gcStatusLabel.Text := "Duplicate"
			Sleep 1000
			gcStatusLabel.Text := sOGMessage
			gcListView.Modify(iRow, "+Select") ;selecte the duplicate item in the list
			gcListView.Modify(iRow, "Vis")
			gcEditButton.Enabled := true
			gcDeleteButton.Enabled := true
			return 0
		}

		;if the device is the one selected and is not a duplicate
		if (sDevice == gcDevices.Text && !Settings.ItemInList(sDevice, sAction, cl, cl_2, cl_3))
		{
			iRow := gcListView.Insert(1000,, sDevice, sAction, , gcAnnunciationEdit.Text, pe, cl, pe_2, cl_2, te, te_2, te_3, pe_3, cl_3)
			
			Settings.ResizeColumns()
			gcSaveButton.Enabled := true
			gcClearButton.Enabled := true
			Settings.ResequenceList()
			gcListView.Modify(Settings.ItemInList(sDevice, sAction, cl, cl_2, cl_3), "+Select") ;select the item just added
			gcListView.Modify(iRow, "Vis")
			gcEditButton.Enabled := true
			gcDeleteButton.Enabled := true
			
			if (gcListView.GetCount() > 1)
			{
				gcMoveUpButton.Enabled := true
				gcMoveDownButton.Enabled := true
			}
			return 1
		}

		return 0
	}

	static GetFormattedCommandLine(sProfile, sTemplate)
	{
		profile_name := ""
		profile_full_name := ""
		cl := ""

		SplitPath(sProfile, &profile_name)
		profile_full_name := sProfile

		cl := StrReplace(sTemplate, "[profile_name]", profile_name)
		cl := StrReplace(cl, "[profile_full_name]", profile_full_name)

		return cl
	}

	/**
	 * Activate hotkeys on all common keystrokes including Ctrl/Alt/Shift/Win combos
	 */
	static ActivateKeyboardHotkeys()
	{
		Loop 94 ;33-126
		{
			;ObjBindMethod() is needed here, rather than just specifying a function, since the callback is 
			;a method and not a function 
			Hotkey(Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,Chr(A_Index + 32)), "On")
			Hotkey("+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"+" Chr(A_Index + 32)), "On")
			Hotkey("^" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"^" Chr(A_Index + 32)), "On")
			Hotkey("!" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"!" Chr(A_Index + 32)), "On")
			Hotkey("#" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"#" Chr(A_Index + 32)), "On")
			Hotkey("^!" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"^!" Chr(A_Index + 32)), "On")
			Hotkey("^+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"^+" Chr(A_Index + 32)), "On")
			Hotkey("!+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"!+" Chr(A_Index + 32)), "On")
			Hotkey("^!+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback,,"^!+" Chr(A_Index + 32)), "On")
		}
	}

	/**
	 * Disable all hotkeys
	 */
	static DisableKeyboardHotkeys()
	{
		Loop 94 ;33-126
		{
			Hotkey(Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("^" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("!" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("#" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("^!" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("^+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("!+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
			Hotkey("^!+" Chr(A_Index + 32), ObjBindMethod(Settings.Key_Callback), "Off")
		}
	}

	static SetAssignButtonState(bState)
	{
		global gcProfileEdit

		if (bState)
		{
			gcAssignButton.Enabled := true
			gcProfileEdit.Enabled := true
			gcProfileBrowseButton.Enabled := true
			gcCancelAssignButton.Enabled := false

			gcStatusLabel.Text := ""
		}
		else
		{
			gcAssignButton.Enabled := false
			gcProfileEdit.Enabled := false
			gcProfileBrowseButton.Enabled := false
			gcCancelAssignButton.Enabled := true
		}
	}

	static CancelAssign()
	{
		if (gcDevices.Text == "Keyboard")
		{
			Settings.DisableKeyboardHotkeys()
			Settings.SetAssignButtonState(true)
		}
		else
			global bCancelAssign := true
	}

	/**
	 * Keep the two template listboxes in sync if new items
	 * are added or removed.
	 */
	static SyncTemplates()
	{
		aTemplates := Array()
		aTemplates := ControlGetItems(gcTemplateEdit)

		gcTemplateEdit_2.Delete()
		gcTemplateEdit_2.Add(aTemplates)
		gcTemplateEdit_2.Text := gcTemplateEdit.Text

		gcTemplateEdit_3.Delete()
		gcTemplateEdit_3.Add(aTemplates)
		gcTemplateEdit_3.Text := gcTemplateEdit.Text
	}

	static RadioButtonStateUpdate()
	{
		if (gcSendKey_Radio.Value && gcSendKey_ComboBox.Text == "")
			gcAssignButton.Enabled := false
		else 
			gcAssignButton.Enabled := true

		if (gcGameInfo_Radio.Value && gcGameInfo_ComboBox.Text == "")
			gcAssignButton.Enabled := false
		else 
			gcAssignButton.Enabled := true
	}

	/**
	 * A checkbox was clicked, so update control states.
	 * 
	 * @param whichbox - Which checkbox was clicked
	 * @param state - The new state of the checkbox
	 */
	static ToggleCheckedState(whichbox, state)
	{
		;whichbox 2 is the first checkbox and whichbox 3 is the second.

		bGroup2Enabled := false
		bGroup3Enabled := false

		if (whichbox == 2 && state == 0)
		{
			gcProfile_2_Checkbox.Value := gcProfile_3_Checkbox.Enabled := gcProfile_3_Checkbox.Value := bGroup2Enabled := bGroup3Enabled := false
		}

		if (whichbox == 2 && state == 1)
		{
			gcProfile_2_Checkbox.Value := gcProfile_3_Checkbox.Enabled := bGroup2Enabled := true
			bGroup3Enabled := gcProfile_3_Checkbox.Value == 1 ? true : false
		}

		if (whichbox == 3 && state = 0)
		{
			bGroup3Enabled := false
			bGroup2Enabled := gcProfile_2_Checkbox.Value == 1 ? true : false
			gcProfile_3_Checkbox.Value := false
		}

		if (whichbox == 3 && state = 1)
		{
			gcProfile_2_Checkbox.Value := gcProfile_3_Checkbox.Value := bGroup2Enabled := bGroup3Enabled := true
		}

		gcProfileLabel_2.Enabled := bGroup2Enabled
		gcProfileEdit_2.Enabled := bGroup2Enabled
		gcProfileBrowseButton_2.Enabled := bGroup2Enabled
		gcTemplateLabel_2.Enabled := bGroup2Enabled
		gcTemplateEdit_2.Enabled := bGroup2Enabled
		gcTestTemplateButton_2.Enabled := bGroup2Enabled
		
		gcProfileLabel_3.Enabled := bGroup3Enabled
		gcProfileEdit_3.Enabled := bGroup3Enabled
		gcProfileBrowseButton_3.Enabled := bGroup3Enabled
		gcTemplateLabel_3.Enabled := bGroup3Enabled
		gcTemplateEdit_3.Enabled := bGroup3Enabled
		gcTestTemplateButton_3.Enabled := bGroup3Enabled
	}

	static AddTemplates()
	{
		aTemplates := Array()
		aTemplates := ControlGetItems(gcTemplateEdit)
		
		sJSON := JSON.stringify(aTemplates)

		fTemplatesFile := FileOpen(sTemplatesFile, "w")

		fTemplatesFile.Write(sJSON)
		fTemplatesFile.Close()

		;Now rebuild the oTemplates object
		sJSON := FileRead(sTemplatesFile)
		global oTemplates := JSON.parse(sJSON)

		return aTemplates.Length
	}

	static UpdateAssignButtonState()
	{

	}

	/**
	 * Checks to see if a specific item is already in the list.
	 * This is used to make sure we don't add duplicates.
	 * @param device 
	 * @param button 
	 * @param cl 
	 * @param cl_2 
	 * @param cl_3
	 * @returns {Integer} 
	 */
	static ItemInList(device, button, cl, cl_2, cl_3)
	{
		if (device == "ROM Monitor") ;ROM Monitor adds an additional check to make sure sequence is only ever 1
		{
			Loop gcListView.GetCount()
			{
				if ((gcListView.GetText(A_Index, Settings.DEVICE) == device && gcListView.GetText(A_Index, Settings.ACTION) == button && gcListView.GetText(A_Index, Settings.SEQUENCE) == 1
					&& gcListView.GetText(A_Index, Settings.COMMAND) == cl && gcListView.GetText(A_Index, Settings.COMMAND_2) == cl_2 && gcListView.GetText(A_Index, Settings.COMMAND_3) == cl_3)
					|| (gcListView.GetText(A_Index, Settings.DEVICE) == device && gcListView.GetText(A_Index, Settings.ACTION) == button && gcListView.GetText(A_Index, Settings.SEQUENCE) == 1))
					return A_Index
			}
		}
		else
		{
			Loop gcListView.GetCount()
			{
				if (gcListView.GetText(A_Index, Settings.DEVICE) == device && gcListView.GetText(A_Index, Settings.ACTION) == button && gcListView.GetText(A_Index, Settings.COMMAND) == cl 
					&& gcListView.GetText(A_Index, Settings.COMMAND_2) == cl_2 && gcListView.GetText(A_Index, Settings.COMMAND_3) == cl_3)
					return A_Index
			}
		}

		return false
	}

	/**
	 * This re-organizes the list to keep all actions associated with a single button or keypress
	 * together, and listed in order of the command sequence. Using the move-up and move-down buttons
	 * in combination with this let users customize the sequencing.
	 * @returns {Integer} 
	 */
	static ResequenceList()
	{
		Loop gcListView.GetCount()
		{
			iSeq := 1

			device := gcListView.GetText(A_Index, 1)
			button := gcListView.GetText(A_Index, 2)

			Loop gcListView.GetCount()
			{
				if (gcListView.GetText(A_Index, 1) == device && gcListView.GetText(A_Index, 2) == button)
				{
					gcListView.Modify(A_Index,,,,iSeq++)
					;break
				}
			}
		}

		gcListView.Redraw()

		return iSeq
	}

	static SetRomInfo()
	{
		sYear := sManufacturer := sRom := sVersion := ""

		if (gcROMDropDown.Text = "[Default]")
			gcROMDropDownGameInfo.Text := ""

		try sYear := ReadListXML.GetXMLMetaInfo(sGamesXMLFile, mRomsByName[gcROMDropDown.Text])["year"]
		try sManufacturer := ReadListXML.GetXMLMetaInfo(sGamesXMLFile, mRomsByName[gcROMDropDown.Text])["manufacturer"]
		try sVersion := ReadListXML.GetXMLMetaInfo(sGamesXMLFile, mRomsByName[gcROMDropDown.Text])["version"]

		;A couple exceptions
		if (gcROMDropDown.Text == "Aero Fighters" || gcROMDropDown.Text == "Gain Ground")
			sVersion := SubStr(sVersion, 1, 30)

		gcROMDropDownGameVersion.Text := sVersion

		if (sManufacturer)
			gcROMDropDownGameInfo.Text := sManufacturer " (" sYear ")"
		else
			gcROMDropDownGameInfo.Text := sYear

		try sRom := mRomsByName[gcROMDropDown.Text]

		if (sRom == "[Default]")
			gcROMDropDownGameRom.Text := ""
		else
			gcROMDropDownGameRom.Text := sRom == "" ? sRom : sRom ".zip"

		gcAssignButton.TT := "Press to add the ROM Monitor action for`nthe " mRomsByName[gcROMDropDown.Text] " rom to the table."
	}

	/**
	 * Auto-resize columns based on the width of their content
	 */
	static ResizeColumns()
	{
		Settings.iCommandLinesUsed := 1
		
		Loop gcListView.GetCount()
		{
			;test := gcListView.GetText(A_Index, Settings.COMMAND_2)
			if (gcListView.GetText(A_Index, Settings.COMMAND_2))
			{
				Settings.iCommandLinesUsed := Settings.iCommandLinesUsed < 2 ? 2 : Settings.iCommandLinesUsed
			}
			if (gcListView.GetText(A_Index, Settings.COMMAND_3))
			{
				Settings.iCommandLinesUsed := Settings.iCommandLinesUsed < 3 ? 3 : Settings.iCommandLinesUsed
				break
			}
		}

		gcListView.ModifyCol(Settings.DEVICE,    "AutoHdr")  ;device
		gcListView.ModifyCol(Settings.ACTION,    "AutoHdr")  ;action
		gcListView.ModifyCol(Settings.SEQUENCE,  "AutoHdr")  ;sequence
		gcListView.ModifyCol(Settings.ANNUNC,    "AutoHdr")  ;voice annunciation
		gcListView.ModifyCol(Settings.PROFILE,   0)          ;profile 1 (hidden)
		gcListView.ModifyCol(Settings.COMMAND,   "AutoHdr")  ;command line 1
		gcListView.ModifyCol(Settings.PROFILE_2, 0)          ;profile 2 (hidden)
		if (Settings.iCommandLinesUsed > 1)
			gcListView.ModifyCol(Settings.COMMAND_2, "AutoHdr")  ;command line 2 (hidden unless used)
		else
			gcListView.ModifyCol(Settings.COMMAND_2, 0)
		gcListView.ModifyCol(Settings.TEMPLATE,   0)         ;template 1 (hidden)
		gcListView.ModifyCol(Settings.TEMPLATE_2, 0)         ;template 2 (hidden)
		gcListView.ModifyCol(Settings.TEMPLATE_3, 0)   		 ;template 3 (hidden)
		gcListView.ModifyCol(Settings.PROFILE_3,  0)         ;profile 3 (hidden)
		if (Settings.iCommandLinesUsed > 2)
			gcListView.ModifyCol(Settings.COMMAND_3, "AutoHdr")  ;command line 3 (hidden unless used)
		else
			gcListView.ModifyCol(Settings.COMMAND_3, 0)

		gcListView.Redraw()
	}

	static FillKeysArray()
	{
		aKeys := Array()
			Loop 94 ;33-126
				aKeys.Push(Chr(A_Index + 32))

		aKeys.Push("F1")
		aKeys.Push("F2")
		aKeys.Push("F3")
		aKeys.Push("F4")
		aKeys.Push("F5")
		aKeys.Push("F6")
		aKeys.Push("F7")
		aKeys.Push("F8")
		aKeys.Push("F9")
		aKeys.Push("F10")
		aKeys.Push("F11")
		aKeys.Push("F12")

		aKeys.Push("Enter")
		aKeys.Push("Escape")
		aKeys.Push("Space")
		aKeys.Push("Tab")
		aKeys.Push("Backspace")
		aKeys.Push("Delete")
		aKeys.Push("Insert")
		aKeys.Push("Up")
		aKeys.Push("Down")
        aKeys.Push("Left")
		aKeys.Push("Right")
		aKeys.Push("Home")
		aKeys.Push("End")
		aKeys.Push("PgUp")
		aKeys.Push("PgDn")

		aKeys.Push("Alt")
		aKeys.Push("LAlt")
		aKeys.Push("RAlt")
		aKeys.Push("Shift")
		aKeys.Push("LShift")
		aKeys.Push("RShift")
		aKeys.Push("LWin")
		aKeys.Push("RWin")
		
		aKeys.Push("Sleep")
		
		aKeys.Push("Numpad0")
	    aKeys.Push("Numpad1")
		aKeys.Push("Numpad2")
		aKeys.Push("Numpad3")
	    aKeys.Push("Numpad4")
		aKeys.Push("Numpad5")
		aKeys.Push("Numpad6")
	    aKeys.Push("Numpad7")
		aKeys.Push("Numpad8")
		aKeys.Push("Numpad9")
	    aKeys.Push("NumpadDot")
		aKeys.Push("NumpadEnter")
		aKeys.Push("NumpadMult")
		aKeys.Push("NumpadDiv")
		aKeys.Push("NumpadAdd")
		aKeys.Push("NumpadSub")
		aKeys.Push("NumpadDel")
	    aKeys.Push("NumpadIns")
		aKeys.Push("NumpadClear")
		aKeys.Push("NumpadUp")
	    aKeys.Push("NumpadDown")
		aKeys.Push("NumpadLeft")
		aKeys.Push("NumpadRight")
	    aKeys.Push("NumpadHome")
		aKeys.Push("NumpadEnd")
		aKeys.Push("NumpadPgUp")
	    aKeys.Push("NumpadPgDn")

		aKeys.Push("Volume_Mute")
		aKeys.Push("Volume_Down")
		aKeys.Push("Volume_Up")
		aKeys.Push("Media_Next")
		aKeys.Push("Media_Prev")		
		aKeys.Push("Media_Stop")
		aKeys.Push("Media_Play_Pause")
		aKeys.Push("PrintScreen")
		aKeys.Push("CtrlBreak")
		aKeys.Push("Pause")

		return aKeys
	}
}